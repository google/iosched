/*
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    flatDir {
        dirs '../third_party/AndroidSlidingUpPanel/libs/'
    }
    flatDir {
        dirs '../third_party/svg-android/libs/'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"

    defaultConfig {
        applicationId "com.google.samples.apps.iosched"
        versionCode = Integer.valueOf("" + appVersionCode).intValue()
        versionName "${appVersionName}"
        minSdkVersion 16

        // Multidex is used since dev build types don't use minification (for faster builds). The
        // release builds do use minificaton and only have a single dex file. If the release builds
        // start using 2+ dex files we would need to look for opportunities to fix that for an app
        // of this size. Multidex doesn't incur the long app startup time when more dex files
        // doesn't exist in the APK.
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "false")
        buildConfigField("String", "GCM_API_KEY", "\"${gcm_api_key}\"")
        buildConfigField("String", "GCM_SENDER_ID", "\"${gcm_sender_id}\"")
        buildConfigField("String", "GENERIC_API_KEY", "\"${oauth2_creds_api_key}\"")
        buildConfigField("String", "YOUTUBE_API_KEY", "\"${youtube_api_key}\"")
        buildConfigField("String", "FEEDBACK_API_ENDPOINT", "\"${feedback_api_endpoint}\"")
        buildConfigField("String", "TEST_YOUTUBE_LIVE_URL", "\"${test_youtube_live_url}\"")
        buildConfigField("String", "METADATA_URL", "\"${metadata_url}\"")
        buildConfigField("String", "WIFI_SSID", "\"${wifi_ssid}\"")
        buildConfigField("String", "WIFI_PASSPHRASE", "\"${wifi_passphrase}\"")
        buildConfigField("String", "CONFERENCE_HASHTAG", "\"${conference_hashtag}\"")
        buildConfigField("String", "CONFERENCE_HASHTAG_PREFIX", "\"${conference_hashtag_prefix}\"")
        buildConfigField("String", "BOOTSTRAP_DATA_TIMESTAMP", "\"${bootstrap_data_timestamp}\"")
        buildConfigField("String", "PRECONFERENCE_DAY_START", "\"${preconference_day_start}\"")
        buildConfigField("String", "PRECONFERENCE_DAY_END", "\"${preconference_day_end}\"")
        buildConfigField("String", "CONFERENCE_DAY1_START", "\"${conference_day1_start}\"")
        buildConfigField("String", "CONFERENCE_DAY1_END", "\"${conference_day1_end}\"")
        buildConfigField("String", "CONFERENCE_DAY2_START", "\"${conference_day2_start}\"")
        buildConfigField("String", "CONFERENCE_DAY2_END", "\"${conference_day2_end}\"")
        buildConfigField("String", "CONFERENCE_DAY3_START", "\"${conference_day3_start}\"")
        buildConfigField("String", "CONFERENCE_DAY3_END", "\"${conference_day3_end}\"")
        buildConfigField("String", "INPERSON_TIMEZONE", "\"${inperson_timezone}\"")
        buildConfigField("String", "SHOW_IO_REQUEST_SOCIAL_PANEL_TIME",
                "\"${show_io_request_social_panel_time}\"")
        buildConfigField("String[]", "FIREBASE_URLS", "{\"${iosched_firebase_debug_db1}\"," +
                "\"${iosched_firebase_debug_db2}\",\"${iosched_firebase_debug_db3}\"}")
        buildConfigField("boolean", "ENABLE_MYSCHEDULE_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_IOLIVE_IN_NAVIGATION", "false")
        buildConfigField("boolean", "ENABLE_EXPLORE_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_MAP_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_SOCIAL_IN_NAVIGATION", "false")
        buildConfigField("boolean", "ENABLE_VIDEOLIB_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_SIGNIN_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_SETTINGS_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_ABOUT_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_EXTENDED_SESSION_URL", "true")
        buildConfigField("String", "CONFERENCE_VERSION", "\"${conf_version}\"")
        buildConfigField("String", "PRODUCTION_WEBSITE_HOST_NAME", "\"${production_website_host_name}\"")
        buildConfigField("String", "WEB_URL_SCHEDULE_PATH", "\"${web_url_schedule_path}\"")

        resValue("string", "pref_conf_messages_enabled", "pref_conf_messages_enabled_${conf_version}")
        buildConfigField("String", "PREF_CONF_MESSAGES_ENABLED", "\"pref_conf_messages_enabled_${conf_version}\"")

        resValue("string", "pref_attendee_at_venue", "pref_attendee_at_venue_${conf_version}")
        buildConfigField("String", "PREF_ATTENDEE_AT_VENUE", "\"pref_attendee_at_venue_${conf_version}\"")

        resValue("string", "pref_session_reminders_enabled", "pref_session_reminders_enabled_${conf_version}")
        buildConfigField("String", "PREF_SESSION_REMINDERS_ENABLED", "\"pref_session_reminders_enabled_${conf_version}\"")

        resValue("string", "pref_session_feedback_reminders_enabled", "pref_session_feedback_reminders_enabled_${conf_version}")
        buildConfigField("String", "PREF_SESSION_FEEDBACK_REMINDERS_ENABLED", "\"pref_session_feedback_reminders_enabled_${conf_version}\"")

        buildConfigField("String", "PREF_DATA_BOOTSTRAP_DONE", "\"pref_bootstrap_done_${conf_version}\"")
        buildConfigField("String", "KEYNOTE_SESSION_ID", "\"${keynote_session_id}\"")

        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_VENUEMARKER",
                "new com.google.android.gms.maps.model.LatLng(${map_venuemarker})")
        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_AREA_NW",
                "new com.google.android.gms.maps.model.LatLng(${map_area_nw})")
        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_AREA_SE",
                "new com.google.android.gms.maps.model.LatLng(${map_area_se})")
        buildConfigField("float", "MAP_DEFAULTCAMERA_BEARING", "${map_defaultcamera_bearing}")
        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_DEFAULTCAMERA_TARGET",
                "new com.google.android.gms.maps.model.LatLng(${map_defaultcamera_target})")
        buildConfigField("float", "MAP_DEFAULTCAMERA_ZOOM", "${map_defaultcamera_zoom}")
        buildConfigField("float", "MAP_DEFAULTCAMERA_TILT", "${map_defaultcamera_tilt}")
        buildConfigField("float", "MAP_MAXRENDERED_ZOOM", "${map_maxrendered_zoom}")
        buildConfigField("float", "MAP_VENUECAMERA_ZOOM", "${map_venuecamera_zoom}")
        buildConfigField("float[]", "MAP_FLOORPLAN_MAPPING", "{${map_floorplan_nw}," +
                "${map_floorplan_ne}, ${map_floorplan_se}}" )
    }

    signingConfigs {
        debug {
            storeFile file("../android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        // Notice the production keystore and password are not checked in. Signing resources for
        // release builds are typically stored somewhere more secure than the source repo.
        // This typically also means that release builds are signed manually rather than by
        // Gradle.
    }

    productFlavors {
        // Use this flavor to run automated tests.
        targetSdk22 {
            // Disables the dogfood warning to prevent issues with tests.
            buildConfigField("boolean", "SUPPRESS_DOGFOOD_WARNING", "true")
            // Targeting prevents runtime permission dialogs from being presented.
            targetSdkVersion 22
        }
        normal {
            // Do no short-circuit the dogfood warning so it might display if appropriate.
            buildConfigField("boolean", "SUPPRESS_DOGFOOD_WARNING", "false")
            targetSdkVersion 23
        }

        mapEditor {
            // Disable remote data updates for this flavor. All map data is reloaded from
            // external storage at launch.
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"\"")
            buildConfigField("boolean", "SUPPRESS_DOGFOOD_WARNING", "true")
            targetSdkVersion 22
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "true")
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${staging_api_manifest_endpoint}\"")
            buildConfigField("String", "GCM_SERVER_URL", "\"${production_gcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
            buildConfigField("String[]", "FIREBASE_URLS", "{\"${iosched_firebase_debug_db1}\"," +
                    "\"${iosched_firebase_debug_db2}\",\"${iosched_firebase_debug_db3}\"}")
            resValue("string", "maps_api_key", "${maps_api_key_debugstore}")
        }
        qualityassurance {
            debuggable true
            minifyEnabled true
            signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')
            buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "true")
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "GCM_SERVER_URL", "\"${production_gcm_server_endpoint}\"")
            buildConfigField("String[]", "FIREBASE_URLS", "{\"${iosched_firebase_debug_db1}\"," +
                    "\"${iosched_firebase_debug_db2}\",\"${iosched_firebase_debug_db3}\"}")
            resValue("string", "website_host_name", "${production_website_host_name}")
            resValue("string", "maps_api_key", "${maps_api_key_debugstore}")
        }
        release {
            debuggable false
            minifyEnabled true
            // No signing config as we do this separately.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "GCM_SERVER_URL", "\"${production_gcm_server_endpoint}\"")
            buildConfigField("String[]", "FIREBASE_URLS", "{\"${iosched_firebase_prod_db1}\"," +
                    "\"${iosched_firebase_prod_db2}\"," +
                    "\"${iosched_firebase_prod_db3}\"," +
                    "\"${iosched_firebase_prod_db4}\"," +
                    "\"${iosched_firebase_prod_db5}\"," +
                    "\"${iosched_firebase_prod_db6}\"," +
                    "\"${iosched_firebase_prod_db7}\"," +
                    "\"${iosched_firebase_prod_db8}\"," +
                    "\"${iosched_firebase_prod_db9}\"," +
                    "\"${iosched_firebase_prod_db10}\"}")
            resValue("string", "website_host_name", "${production_website_host_name}")
            resValue("string", "maps_api_key", "${maps_api_key_releasestore}")
        }
    }

    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress 'apk'
    }

    packagingOptions {
        // Exclude files to avoid packaging collisions (same file name in multiple dependencies).
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    // Test Android jar comes with unimplemented methods that throw exceptions by default. This
    // option forces the methods to return default values instead. Required for static methods,
    // such as TextUtils, as those cannot be mocked with Mockito.
    // Refer http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // Include libraries checked into the libs directory.
    compile fileTree(dir: 'libs', include: '*.jar')

    // Google Play services split client libs.
    compile "com.google.android.gms:play-services-analytics:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-appindexing:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-auth:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-gcm:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-maps:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-plus:${google_play_services_client_library_version}"

    // Android support libraries.
    compile "com.android.support:appcompat-v7:${android_support_lib_version}"
    compile "com.android.support:cardview-v7:${android_support_lib_version}"
    compile "com.android.support:design:${android_support_lib_version}"
    compile "com.android.support:support-v13:${android_support_lib_version}"
    compile "com.android.support:recyclerview-v7:${android_support_lib_version}"
    compile "com.android.support:preference-v7:${android_support_lib_version}"

    // JSON utility library.
    compile 'com.google.code.gson:gson:2.3'

    // Glide library, used to handle asynchronous loading and caching of images.
    compile 'com.github.bumptech.glide:glide:3.5.2'

    compile files('../third_party/disklrucache/libs/disklrucache-2.0.2.jar')
    compile files('../third_party/volley/libs/volley.jar')
    compile files('../third_party/basic-http-client/libs/basic-http-client-android-0.88.jar')
    // SVG processor for the Conference Map overlay.
    compile(name: 'svg-android-2.0.7-20150515.214425-1', ext: 'jar')

    // Google Maps Android API utility library
    compile('com.google.maps.android:android-maps-utils:0.3.4') {
        exclude group: "com.google.android.gms"
    }

    // Dependencies for android tests which reside in the "androidTest" src folder.
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-intents:2.2.2'
    androidTestCompile 'com.android.support.test.espresso:espresso-contrib:2.2.2'
    // Resolve conflicts between main and test APK:
    androidTestCompile "com.android.support:support-annotations:${android_support_lib_version}"
    androidTestCompile "com.android.support:recyclerview-v7:${android_support_lib_version}"
    androidTestCompile "com.android.support:design:${android_support_lib_version}"

    // Dependencies for unit tests which reside in the "tests" src folder.
    testCompile 'junit:junit:4.12'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.mockito:mockito-core:1.10.8'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4-rule-agent:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.json:json:20090211'

    // Added to resolve conflicts between the app build and the test build. The app build resolves
    // the jsr305 dependency to version 1.3.9, but in the test build the espresso-core dependency
    // resolves jsr305 to 2.0.1. Declaring a compile dependency on jsr305 2.0.1 will ensure 2.0.1 or
    // greater is used for both app and test builds.
    compile 'com.google.code.findbugs:jsr305:2.0.1'

    compile 'com.google.guava:guava:18.0'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.firebase:firebase-client-android:2.5.0'
}
