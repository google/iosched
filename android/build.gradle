/*
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    flatDir {
        dirs '../third_party/AndroidSlidingUpPanel/libs/'
    }
    flatDir {
        dirs '../third_party/svg-android/libs/'
    }
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "no.java.schedule"
        version "${version_code}"
        versionName "${version_name}"
        minSdkVersion 14
        targetSdkVersion 23

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "false")
        buildConfigField("String", "GENERIC_API_KEY", "\"${oauth2_creds_api_key}\"")
        buildConfigField("String", "YOUTUBE_API_KEY", "\"${youtube_api_key}\"")
        buildConfigField("String", "FEEDBACK_API_ENDPOINT", "\"${feedback_api_endpoint}\"")
        buildConfigField("String", "TEST_YOUTUBE_LIVE_URL", "\"${test_youtube_live_url}\"")
        buildConfigField("String", "METADATA_URL", "\"${metadata_url}\"")
        buildConfigField("String", "WIFI_SSID", "\"${wifi_ssid}\"")
        buildConfigField("String", "WIFI_PASSPHRASE", "\"${wifi_passphrase}\"")
        buildConfigField("String", "CONFERENCE_HASHTAG", "\"${conference_hashtag}\"")
        buildConfigField("String", "CONFERENCE_HASHTAG_PREFIX", "\"${conference_hashtag_prefix}\"")
        buildConfigField("String", "BOOTSTRAP_DATA_TIMESTAMP", "\"${bootstrap_data_timestamp}\"")
        buildConfigField("String", "CONFERENCE_DAY1_START", "\"${conference_day1_start}\"")
        buildConfigField("String", "CONFERENCE_DAY1_END", "\"${conference_day1_end}\"")
        buildConfigField("String", "CONFERENCE_DAY2_START", "\"${conference_day2_start}\"")
        buildConfigField("String", "CONFERENCE_DAY2_END", "\"${conference_day2_end}\"")
        buildConfigField("String", "INPERSON_TIMEZONE", "\"${inperson_timezone}\"")
        buildConfigField("String", "SHOW_IO15_REQUEST_SOCIAL_PANEL_TIME",
                "\"${show_io15_request_social_panel_time}\"")
    }

    signingConfigs {
         debug {
            storeFile file("../debug.keystore")
            storePassword "android"
            keyAlias "javazonedebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
          //  signingConfig signingConfigs.debug
            buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "true")
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "GCM_SERVER_URL", "\"${production_gcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
        }
        qualityassurance {
            debuggable true
            minifyEnabled true
          //  signingConfig signingConfigs.debug
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')
            buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "true")
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "GCM_SERVER_URL", "\"${production_gcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
        }
        release {
            debuggable false
            minifyEnabled true
            // No signing config as we do this separately.
            proguardFiles getDefaultProguardFile('proguard-android.txt'), file('proguard-project.txt')
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "GCM_SERVER_URL", "\"${production_gcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
        }
    }

    lintOptions {
        abortOnError false
        disable 'InvalidPackage'

    }

    aaptOptions {
        noCompress 'apk'
    }

    packagingOptions {
        // Exclude files to avoid packaging collisions (same file name in multiple dependencies).
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // Test Android jar comes with unimplemented methods that throw exceptions by default. This
    // option forces the methods to return default values instead. Required for static methods,
    // such as TextUtils, as those cannot be mocked with Mockito.
    // Refer http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // Include libraries checked into the libs directory.
    compile fileTree(dir: 'libs', include: '*.jar')

    // Google Play services split client libs.
    compile "com.google.android.gms:play-services-analytics:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-drive:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-maps:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-plus:${google_play_services_client_library_version}"
    compile "com.google.android.gms:play-services-wearable:${google_play_services_client_library_version}"

    // Android support libraries.
    compile "com.android.support:appcompat-v7:${android_support_lib_version}"
    compile "com.android.support:cardview-v7:${android_support_lib_version}"
    compile "com.android.support:design:${android_support_lib_version}"
    compile "com.android.support:support-v13:${android_support_lib_version}"

    // Different Open Source Libraries
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta2'
    compile 'com.squareup:otto:1.3.8'
    compile 'com.squareup.picasso:picasso:2.5.2'


    // JSON utility library.
    compile 'com.google.code.gson:gson:2.4'

    // Glide library, used to handle asynchronous loading and caching of images.
    compile 'com.github.bumptech.glide:glide:3.5.2'

    compile files('../third_party/disklrucache/libs/disklrucache-2.0.2.jar')
    compile files('../third_party/volley/libs/volley.jar')
    compile files('../third_party/basic-http-client/libs/basic-http-client-android-0.88.jar')
    // SVG processor for the Conference Map overlay.
    compile (name:'svg-android-2.0.7-20150515.214425-1', ext:'jar')
    // Android Sliding Up Panel library. Compiled from third_party/AndroidSlidingUpPanel.
    // Version number denotes original checked out commit, see README.google in library directory.
    compile (name:'android-sliding-up-panel-master-8129831576', ext:'aar')

    // Google Maps Android API utility library
    compile('com.google.maps.android:android-maps-utils:0.3.4') {
        exclude group: "com.google.android.gms"
    }

    // Dependencies for android tests which reside in the "androidTest" src folder.

    // Added to resolve conflicts between the app build and the test build. The app build resolves
    // the jsr305 dependency to version 1.3.9, but in the test build the espresso-core dependency
    // resolves jsr305 to 2.0.1. Declaring a compile dependency on jsr305 2.0.1 will ensure 2.0.1 or
    // greater is used for both app and test builds.
    compile 'com.google.code.findbugs:jsr305:2.0.1'

    // Needed to implement the IdlingResource interface on certain async models.
    compile 'com.android.support.test.espresso:espresso-idling-resource:2.0'

    compile 'com.google.guava:guava:18.0'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.squareup.retrofit2:retrofit:2.0.1'}