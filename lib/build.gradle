/*
 * Copyright 2015 Google Inc. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.library'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    flatDir {
        dirs '../third_party/AndroidSlidingUpPanel/libs/'
    }
    flatDir {
        dirs '../third_party/svg-android/libs/'
    }
    flatDir {
        dirs '../third_party/sticky-headers/libs/'
    }
    flatDir {
        dirs '../third_party/material-components-android/libs/'
    }
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        versionCode = Integer.valueOf("" + appVersionCode).intValue()
        versionName "${appVersionName}"
        minSdkVersion rootProject.ext.minSdkVersion

        vectorDrawables.useSupportLibrary = true

        consumerProguardFiles file('proguard-project.txt')

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "false")
        buildConfigField("String", "FCM_API_KEY", "\"${fcm_api_key}\"")
        buildConfigField("String", "FCM_SENDER_ID", "\"${fcm_sender_id}\"")
        buildConfigField("String", "GENERIC_API_KEY", "\"${oauth2_creds_api_key}\"")
        buildConfigField("String", "YOUTUBE_API_KEY", "\"${youtube_api_key}\"")
        buildConfigField("String", "FEEDBACK_API_ENDPOINT", "\"${feedback_api_endpoint}\"")
        buildConfigField("String", "TEST_YOUTUBE_LIVE_URL", "\"${test_youtube_live_url}\"")
        buildConfigField("String", "METADATA_URL", "\"${metadata_url}\"")
        buildConfigField("String", "WIFI_SSID", "\"${wifi_ssid}\"")
        buildConfigField("String", "WIFI_PASSPHRASE", "\"${wifi_passphrase}\"")
        buildConfigField("String", "CONFERENCE_HASHTAG", "\"${conference_hashtag}\"")
        buildConfigField("String", "CONFERENCE_HASHTAG_PREFIX", "\"${conference_hashtag_prefix}\"")
        buildConfigField("String", "BOOTSTRAP_DATA_TIMESTAMP", "\"${bootstrap_data_timestamp}\"")
        buildConfigField("String", "PRECONFERENCE_DAY_START", "\"${preconference_day_start}\"")
        buildConfigField("String", "PRECONFERENCE_DAY_END", "\"${preconference_day_end}\"")
        buildConfigField("String", "CONFERENCE_DAY1_START", "\"${conference_day1_start}\"")
        buildConfigField("String", "CONFERENCE_DAY1_END", "\"${conference_day1_end}\"")
        buildConfigField("String", "CONFERENCE_DAY2_START", "\"${conference_day2_start}\"")
        buildConfigField("String", "CONFERENCE_DAY2_END", "\"${conference_day2_end}\"")
        buildConfigField("String", "CONFERENCE_DAY3_START", "\"${conference_day3_start}\"")
        buildConfigField("String", "CONFERENCE_DAY3_END", "\"${conference_day3_end}\"")
        buildConfigField("String", "INPERSON_TIMEZONE", "\"${inperson_timezone}\"")
        buildConfigField("String", "SHOW_IO_REQUEST_SOCIAL_PANEL_TIME",
                "\"${show_io_request_social_panel_time}\"")
        buildConfigField("boolean", "ENABLE_MYSCHEDULE_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_MYIO_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_FEED_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_MAP_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_INFO_IN_NAVIGATION", "true")
        buildConfigField("boolean", "ENABLE_EXTENDED_SESSION_URL", "true")
        buildConfigField("String", "CONFERENCE_VERSION", "\"${conf_version}\"")
        buildConfigField("String", "PRODUCTION_WEBSITE_HOST_NAME", "\"${production_website_host_name}\"")
        buildConfigField("String", "WEB_URL_SCHEDULE_PATH", "\"${web_url_schedule_path}\"")
        buildConfigField("String", "DEFAULT_WEB_CLIENT_ID", "\"${default_web_client_id}\"")

        resValue("string", "pref_conf_messages_enabled", "pref_conf_messages_enabled_${conf_version}")
        buildConfigField("String", "PREF_CONF_MESSAGES_ENABLED", "\"pref_conf_messages_enabled_${conf_version}\"")

        resValue("string", "pref_attendee_at_venue", "pref_attendee_at_venue_int_${conf_version}")
        buildConfigField("String", "PREF_ATTENDEE_AT_VENUE", "\"pref_attendee_at_venue_int_${conf_version}\"")

        resValue("string", "pref_last_registration_check_ts", "pref_last_registration_check_ts_${conf_version}")
        buildConfigField("String", "PREF_LAST_REGISTRATION_CHECK_TS", "\"pref_last_registration_check_ts_${conf_version}\"")

        resValue("string", "pref_session_reminders_enabled", "pref_session_reminders_enabled_${conf_version}")
        buildConfigField("String", "PREF_NOTIFICATIONS_ENABLED", "\"pref_session_reminders_enabled_${conf_version}\"")

        resValue("string", "pref_session_feedback_reminders_enabled", "pref_session_feedback_reminders_enabled_${conf_version}")
        buildConfigField("String", "PREF_SESSION_FEEDBACK_REMINDERS_ENABLED", "\"pref_session_feedback_reminders_enabled_${conf_version}\"")

        buildConfigField("String", "PREF_DATA_BOOTSTRAP_DONE", "\"pref_bootstrap_done_${conf_version}\"")
        buildConfigField("String", "KEYNOTE_SESSION_ID", "\"${keynote_session_id}\"")

        buildConfigField("String", "NEW_FEED_ITEM", "\"new_feed_item\"")

        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_VIEWPORT_NW",
                "new com.google.android.gms.maps.model.LatLng(${map_viewport_nw})")
        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_VIEWPORT_SE",
                "new com.google.android.gms.maps.model.LatLng(${map_viewport_se})")
        buildConfigField("float", "MAP_VIEWPORT_MINZOOM", "${map_viewport_minzoom}")
        buildConfigField("float", "MAP_DEFAULTCAMERA_BEARING", "${map_defaultcamera_bearing}")
        buildConfigField("com.google.android.gms.maps.model.LatLng", "MAP_DEFAULTCAMERA_TARGET",
                "new com.google.android.gms.maps.model.LatLng(${map_defaultcamera_target})")
        buildConfigField("float", "MAP_DEFAULTCAMERA_ZOOM", "${map_defaultcamera_zoom}")
        buildConfigField("float", "MAP_DEFAULTCAMERA_TILT", "${map_defaultcamera_tilt}")
        buildConfigField("float", "MAP_VENUECAMERA_ZOOM", "${map_venuecamera_zoom}")
        buildConfigField("float[]", "MAP_FLOORPLAN_MAPPING", "{${map_floorplan_nw}," +
                "${map_floorplan_ne}, ${map_floorplan_se}}")
    }

    signingConfigs {
        debug {
            storeFile file("../android/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
        // Notice the production keystore and password are not checked in. Signing resources for
        // release builds are typically stored somewhere more secure than the source repo.
        // This typically also means that release builds are signed manually rather than by
        // Gradle.
    }

    flavorDimensions "default"
    productFlavors {
        // Use this flavor to run automated tests.
        targetSdk22 {
            // Disables the dogfood warning to prevent issues with tests.
            buildConfigField("boolean", "SUPPRESS_DOGFOOD_WARNING", "true")
            // Targeting prevents runtime permission dialogs from being presented.
            targetSdkVersion 22
        }

        normal {
            // Do no short-circuit the dogfood warning so it might display if appropriate.
            buildConfigField("boolean", "SUPPRESS_DOGFOOD_WARNING", "false")
            targetSdkVersion rootProject.ext.targetSdkVersion
        }

        mapEditor {
            // Disable remote data updates for this flavor. All map data is reloaded from
            // external storage at launch.
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"\"")
            buildConfigField("boolean", "SUPPRESS_DOGFOOD_WARNING", "true")
            targetSdkVersion rootProject.ext.targetSdkVersion
        }
    }

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            signingConfig signingConfigs.debug
            buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "true")
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${staging_api_manifest_endpoint}\"")
            buildConfigField("String", "FCM_SERVER_URL", "\"${production_fcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
            resValue("string", "maps_api_key", "${maps_api_key_debugstore}")

        }
        qualityassurance {
            debuggable true
            minifyEnabled true
            signingConfig signingConfigs.debug
            buildConfigField("boolean", "ENABLE_DEBUG_TOOLS", "true")
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "FCM_SERVER_URL", "\"${production_fcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
            resValue("string", "maps_api_key", "${maps_api_key_debugstore}")
        }
        release {
            debuggable false
            minifyEnabled false
            useProguard false
            // No signing config as we do this separately.
            buildConfigField("String", "SERVER_MANIFEST_ENDPOINT", "\"${production_api_manifest_endpoint}\"")
            buildConfigField("String", "FCM_SERVER_URL", "\"${production_fcm_server_endpoint}\"")
            resValue("string", "website_host_name", "${production_website_host_name}")
            resValue("string", "maps_api_key", "${maps_api_key_releasestore}")
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        // Exclude files to avoid packaging collisions (same file name in multiple dependencies).
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE-FIREBASE.txt'
        exclude 'META-INF/NOTICE'
    }

    // Test Android jar comes with unimplemented methods that throw exceptions by default. This
    // option forces the methods to return default values instead. Required for static methods,
    // such as TextUtils, as those cannot be mocked with Mockito.
    // Refer http://tools.android.com/tech-docs/unit-testing-support#TOC-Method-...-not-mocked.-
    testOptions {
        unitTests.returnDefaultValues = true
    }
}

dependencies {
    // Backend server
    implementation project(path: ':server', configuration: 'android-endpoints')

    implementation('com.google.api-client:google-api-client:1.22.0') {
        // Dependency org.apache.httpcomponents:httpclient:4.0.1
        // conflicts with the internal version provided by Android.
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    implementation('com.google.api-client:google-api-client-android:1.22.0') {
        // Dependency org.apache.httpcomponents:httpclient:4.0.1
        // conflicts with the internal version provided by Android.
        exclude group: 'org.apache.httpcomponents', module: 'httpclient'
    }

    // Google Play services split client libs.
    implementation "com.google.android.gms:play-services-analytics:16.0.1"
    implementation "com.google.android.gms:play-services-auth:15.0.1"
    implementation "com.google.android.gms:play-services-maps:15.0.1"
    implementation "com.google.android.gms:play-services-plus:15.0.1"

    // Android support libraries.
    implementation "com.android.support:appcompat-v7:${android_support_lib_version}"
    implementation "com.android.support:cardview-v7:${android_support_lib_version}"
    implementation "com.android.support:support-v13:${android_support_lib_version}"
    implementation "com.android.support:recyclerview-v7:${android_support_lib_version}"
    implementation "com.android.support:preference-v7:${android_support_lib_version}"
    implementation "com.android.support:support-v4:${android_support_lib_version}"
    implementation "com.android.support:transition:${android_support_lib_version}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    // Use a local build of the design lib to pick up some fixes.
    // See third_party/material-components-android
    implementation(name: 'design-release-32b1f74', ext: 'aar')

    // JSON utility library.
    implementation 'com.google.code.gson:gson:2.8.4'

    // YouTube client library
    implementation files('../third_party/youtube/libs/YouTubeAndroidPlayerApi.jar')

    // Glide library, used to handle asynchronous loading and caching of images.
    implementation ('com.github.bumptech.glide:glide:3.7.0') {
        exclude group: 'com.android.support'
    }

    implementation files('../third_party/disklrucache/libs/disklrucache-2.0.2.jar')
    implementation files('../third_party/basic-http-client/libs/basic-http-client-android-0.88.jar')
    // SVG processor for the Conference Map overlay.
    implementation(name: 'svg-android-2.0.7-20150515.214425-1', ext: 'jar')

    implementation(name: 'StickyHeaders-release', ext: 'aar')

    // Google Maps Android API utility library
    implementation('com.google.maps.android:android-maps-utils:0.5+') {
        exclude group: "com.google.android.gms"
    }

    implementation 'com.google.android:flexbox:0.2.6'

    // Added to resolve conflicts between the app build and the test build. The app build resolves
    // the jsr305 dependency to version 1.3.9, but in the test build the espresso-core dependency
    // resolves jsr305 to 2.0.1. Declaring a compile dependency on jsr305 2.0.1 will ensure 2.0.1 or
    // greater is used for both app and test builds.
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation('uk.co.chrisjenx:calligraphy:2.2.0') {
        exclude group: 'com.android.support:design'
    }
    implementation 'com.airbnb.android:lottie:2.5.5'

    // Firebase libraries
    implementation "com.google.firebase:firebase-core:16.0.1"
    implementation "com.google.firebase:firebase-messaging:17.1.0"
    implementation "com.google.firebase:firebase-appindexing:16.0.1"
    implementation "com.google.firebase:firebase-database:16.0.1"
    implementation "com.google.firebase:firebase-config:16.0.0"
    implementation "com.google.firebase:firebase-auth:16.0.2"
    implementation "com.google.firebase:firebase-crash:16.0.1"

    implementation "org.apache.commons:commons-lang3:3.5"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:${leak_canary_version}"
    qualityassuranceImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leak_canary_version}"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leak_canary_version}"

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    // Resolve conflicts between main and test APK:
    androidTestImplementation "com.android.support:support-annotations:${android_support_lib_version}"
    androidTestImplementation "com.android.support:recyclerview-v7:${android_support_lib_version}"
    androidTestImplementation "com.android.support:support-v4:${android_support_lib_version}"
    androidTestImplementation "com.android.support:design:${android_support_lib_version}"

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-core:1.3'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    testImplementation 'org.powermock:powermock-api-mockito:1.6.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule-agent:1.6.4'
    testImplementation 'org.powermock:powermock-module-junit4-rule:1.6.4'
    testImplementation 'org.powermock:powermock-module-junit4:1.6.4'
    testImplementation 'org.json:json:20160212'
}
